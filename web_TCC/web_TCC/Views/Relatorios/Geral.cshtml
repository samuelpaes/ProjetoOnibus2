@model IEnumerable<web_TCC.Models.V_RegistrosLinhasPontos>

@ViewBag.Error

@{
    ViewBag.Title = "Relatórios - Informações Gerais";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}


@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    <fieldset>

        <div class="control-group">

            <div class="controls">
                <div class="col-md-2 xdisplay_inputx form-group">
                    <span class="fa fa-calendar-o form-control-feedback left" aria-hidden="true"></span>
                    @Html.TextBox("txtGetDataInicio", "", new { @class = "form-control has-feedback-left", placeholder = "Data inicial" })
                </div>
                <div class="col-md-2 xdisplay_inputx form-group">
                    <span class="fa fa-calendar-o form-control-feedback left" aria-hidden="true"></span>
                    @Html.TextBox("txtGetDataFim", "", new { @class = "form-control has-feedback-left", placeholder = "Data final" })
                </div>
                @Html.DropDownList("ID_linha", null, "Linha", new { @class = "dropdown-toggle btn btn-default" })
            </div>
        </div>

    </fieldset>
    <br />
    <fieldset>
        <div class="control-group">
            <div class="controls">
                <div class="col-md-1 xdisplay_inputx form-group">
                    <input type="submit" value="Filtrar" class="btn btn-primary" />
                </div>
                <button type="button" class="btn btn-default" data-toggle="modal" data-target=".bs-example-modal-lg">Gerar Gráfico</button>
            </div>
        </div>
    </fieldset>
}


@if (Model != null)
{
    if (Model.Any())
    {
        <table id="datatable-buttons" class="table table-striped table-bordered" cellspacing="0">
            <thead>
                <tr>
                    <th>Linha</th>
                    <th>Veículo</th>
                    <th>Tipo</th>
                    <th>Data</th>
                    <th>Hora</th>
                    <th>Passageiros</th>
                    <th>Ponto de ônibus</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Registros.Linhas.Numero)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Registros.NumeroVeiculo)
                        </td>
                        <td>
                            @if (item.Registros.Entrada == true)
                            {
                                @Html.Label("Entrada");
                            }
                            else
                            {
                                @Html.Label("Saída");
                            }
                        </td>
                        <td>
                            @item.Registros.Data.ToShortDateString()
                        </td>
                        <td>
                            @item.Registros.Data.ToShortTimeString()
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Registros.QuantidadePessoas)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Pontos.Código) -
                            @Html.DisplayFor(modelItem => item.Pontos.Descricao)
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        // Gráfico
        <div class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">
                            <span aria-hidden="true">×</span>
                        </button>
                        <h4 class="modal-title" id="myModalLabel">Gráfico Relatório Geral</h4>
                    </div>
                    <div class="modal-body">
                        <div class="" id="container" style="width: 64%; height: 450px"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Fechar</button>
                    </div>
                </div>
            </div>
        </div>
    
    }
}

<script type="text/javascript" src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/highcharts.js"></script>
@*<script src="~/Scripts/exporting.js"></script>*@



<script type="text/javascript">
    var chart2;
    var categories = ['0', '1', '2', '3',
                '4', '5', '6', '7', '8',
                '9', '10', '11', '12', '13',
                '14', '15', '16', '17', '18',
                '19', '20', '21', '22', '23'];
    $(function () {
        chart2 = new Highcharts.Chart({
            chart: {
                renderTo: 'container',
                type: 'bar'
            },
            title: {
                text: 'Quantidade média de embarque e desembarque de passageiros por horário'
            },
            //subtitle: {
            //    text: 'Source: <a href="http://populationpyramid.net/germany/2015/">Population Pyramids of the World from 1950 to 2100</a>'
            //},
            xAxis: [{
                categories: categories,
                reversed: false,
                labels: {
                    step: 1
                }
            }, { // mirror axis on right side
                opposite: true,
                reversed: false,
                categories: categories,
                linkedTo: 0,
                labels: {
                    step: 1
                }
            }],
            yAxis: {
                title: {
                    text: 'Passageiros'
                },
                labels: {
                    formatter: function () {
                        return Math.abs(this.value);
                    }
                }
            },

            plotOptions: {
                series: {
                    stacking: 'normal'
                }
            },

            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        'Passageiros: ' + Highcharts.numberFormat(Math.abs(this.point.y), 0);
                }
            },

            exporting: {
                enabled: false
            },

            series: [{
                name: 'Embarque',
                data: [-@ViewBag.emb0, -@ViewBag.emb1, -@ViewBag.emb2, -@ViewBag.emb3, -@ViewBag.emb4,
                       -@ViewBag.emb5, -@ViewBag.emb6, -@ViewBag.emb7, -@ViewBag.emb8, -@ViewBag.emb9,
                       -@ViewBag.emb10, -@ViewBag.emb11, -@ViewBag.emb12, -@ViewBag.emb13, -@ViewBag.emb14,
                       -@ViewBag.emb15, -@ViewBag.emb16, - @ViewBag.emb17, -@ViewBag.emb18, -@ViewBag.emb19,
                       -@ViewBag.emb20, -@ViewBag.emb21, -@ViewBag.emb22, -@ViewBag.emb23]
            }, {
                name: 'Desembarque',
                data: [@ViewBag.des0, @ViewBag.des1, @ViewBag.des2, @ViewBag.des3, @ViewBag.des4,
                       @ViewBag.des5, @ViewBag.des6, @ViewBag.des7, @ViewBag.des8, @ViewBag.des9,
                       @ViewBag.des10, @ViewBag.des11, @ViewBag.des12, @ViewBag.des13, @ViewBag.des14,
                       @ViewBag.des15, @ViewBag.des16, @ViewBag.des17, @ViewBag.des18, @ViewBag.des19,
                       @ViewBag.des20, @ViewBag.des21, @ViewBag.des22, @ViewBag.des23]
            }]
        });
    });
</script>